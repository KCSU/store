// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	auth "github.com/kcsu/store/auth"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kcsu/store/model"
)

// UserStore is an autogenerated mock type for the UserStore type
type UserStore struct {
	mock.Mock
}

// Exists provides a mock function with given fields: email
func (_m *UserStore) Exists(email string) (bool, error) {
	ret := _m.Called(email)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: id
func (_m *UserStore) Find(id int) (model.User, error) {
	ret := _m.Called(id)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(int) model.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrCreate provides a mock function with given fields: au
func (_m *UserStore) FindOrCreate(au *auth.OauthUser) (model.User, error) {
	ret := _m.Called(au)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(*auth.OauthUser) model.User); ok {
		r0 = rf(au)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*auth.OauthUser) error); ok {
		r1 = rf(au)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Groups provides a mock function with given fields: user
func (_m *UserStore) Groups(user *model.User) ([]model.Group, error) {
	ret := _m.Called(user)

	var r0 []model.Group
	if rf, ok := ret.Get(0).(func(*model.User) []model.Group); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
