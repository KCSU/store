// Code generated by mockery 2.10.0. DO NOT EDIT.

package mocks

import (
	model "github.com/kcsu/store/model"
	mock "github.com/stretchr/testify/mock"
)

// GroupStore is an autogenerated mock type for the GroupStore type
type GroupStore struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: group, email
func (_m *GroupStore) AddUser(group *model.Group, email string) error {
	ret := _m.Called(group, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Group, string) error); ok {
		r0 = rf(group, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: id
func (_m *GroupStore) Find(id int) (model.Group, error) {
	ret := _m.Called(id)

	var r0 model.Group
	if rf, ok := ret.Get(0).(func(int) model.Group); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Group)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields:
func (_m *GroupStore) Get() ([]model.Group, error) {
	ret := _m.Called()

	var r0 []model.Group
	if rf, ok := ret.Get(0).(func() []model.Group); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUser provides a mock function with given fields: group, email
func (_m *GroupStore) RemoveUser(group *model.Group, email string) error {
	ret := _m.Called(group, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Group, string) error); ok {
		r0 = rf(group, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
