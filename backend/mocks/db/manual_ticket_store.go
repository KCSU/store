// Code generated by mockery 2.11.0. DO NOT EDIT.

package mocks

import (
	model "github.com/kcsu/store/model"
	mock "github.com/stretchr/testify/mock"

	testing "testing"

	uuid "github.com/google/uuid"
)

// ManualTicketStore is an autogenerated mock type for the ManualTicketStore type
type ManualTicketStore struct {
	mock.Mock
}

// Create provides a mock function with given fields: ticket
func (_m *ManualTicketStore) Create(ticket *model.ManualTicket) error {
	ret := _m.Called(ticket)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ManualTicket) error); ok {
		r0 = rf(ticket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *ManualTicketStore) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: id
func (_m *ManualTicketStore) Find(id uuid.UUID) (model.ManualTicket, error) {
	ret := _m.Called(id)

	var r0 model.ManualTicket
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.ManualTicket); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.ManualTicket)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ticket
func (_m *ManualTicketStore) Update(ticket *model.ManualTicket) error {
	ret := _m.Called(ticket)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ManualTicket) error); ok {
		r0 = rf(ticket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewManualTicketStore creates a new instance of ManualTicketStore. It also registers a cleanup function to assert the mocks expectations.
func NewManualTicketStore(t testing.TB) *ManualTicketStore {
	mock := &ManualTicketStore{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
