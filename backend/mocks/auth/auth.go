// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	auth "github.com/kcsu/store/auth"
	echo "github.com/labstack/echo/v4"

	goth "github.com/markbates/goth"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Auth is an autogenerated mock type for the Auth type
type Auth struct {
	mock.Mock
}

// CompleteUserAuth provides a mock function with given fields: c
func (_m *Auth) CompleteUserAuth(c echo.Context) (goth.User, error) {
	ret := _m.Called(c)

	var r0 goth.User
	if rf, ok := ret.Get(0).(func(echo.Context) goth.User); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(goth.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthUrl provides a mock function with given fields: c
func (_m *Auth) GetAuthUrl(c echo.Context) (string, error) {
	ret := _m.Called(c)

	var r0 string
	if rf, ok := ret.Get(0).(func(echo.Context) string); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClaims provides a mock function with given fields: c
func (_m *Auth) GetClaims(c echo.Context) *auth.JwtClaims {
	ret := _m.Called(c)

	var r0 *auth.JwtClaims
	if rf, ok := ret.Get(0).(func(echo.Context) *auth.JwtClaims); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.JwtClaims)
		}
	}

	return r0
}

// GetUserId provides a mock function with given fields: c
func (_m *Auth) GetUserId(c echo.Context) uuid.UUID {
	ret := _m.Called(c)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(echo.Context) uuid.UUID); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

type mockConstructorTestingTNewAuth interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuth creates a new instance of Auth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuth(t mockConstructorTestingTNewAuth) *Auth {
	mock := &Auth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
